{"version":3,"file":"static/js/636.a44f932b.chunk.js","mappings":"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","sources":["pages/Auth/Login.jsx"],"sourcesContent":["import React, { useEffect, useLayoutEffect, useRef, useState } from \"react\";\nimport {\n  Button,\n  Dialog,\n  IconButton,\n  InputAdornment,\n  TextField,\n  Typography,\n  useMediaQuery,\n} from \"@mui/material\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Box, useTheme } from \"@mui/system\";\nimport { CheckMarkIcon, CheckMarkIconFill } from \"../../assets/images/icons\";\nimport {\n  postLogin,\n  setForgotPasswordDialog,\n  setLogin,\n  setOpenLogin,\n  setRegDialog,\n  setVerifyDialog,\n} from \"../../redux/reducers/auth\";\nimport { useLocation, useNavigate } from \"react-router\";\nimport { useFormik } from \"formik\";\nimport SnackBar from \"../../components/SnackBar\";\nimport { instance } from \"../../api\";\nimport cookie from \"cookie_js\";\nimport { getProfileData } from \"../../redux/reducers/profile\";\nimport { CustomMask } from \"../../components/Mask\";\n// import Main from \"../Main\";\nimport { getCartList } from \"../../redux/reducers/products\";\n\nconst Login = ({ setLoading, t }) => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const theme = useTheme();\n  const md = useMediaQuery(theme.breakpoints.down(768));\n\n  const [visible, setVisible] = useState(false);\n\n  const [rememberMe, setRememberMe] = useState(true);\n\n  const { login, loginDialog } = useSelector(({ auth }) => auth);\n\n  const formik = useFormik({\n    initialValues: {\n      phone: \"\",\n      password: \"\",\n    },\n    onSubmit: (values) => {\n      // show linear progress\n      setLoading(true);\n\n      //remove different characters from phone\n      values.phone = values.phone.replace(/[\\s+().,-]/g, \"\");\n\n      cookie.set(\"phone\", values.phone);\n\n      dispatch(postLogin(values));\n    },\n  });\n\n  const firstUpdate = useRef(true);\n\n  useEffect(() => {\n    dispatch(setOpenLogin(true));\n  }, []);\n\n  useLayoutEffect(() => {\n    if (firstUpdate.current) {\n      firstUpdate.current = false;\n      return;\n    }\n\n    // hide linear progress\n    setLoading(false);\n\n    if (login?.severity == 200) {\n      setTimeout(() => {\n        dispatch(setOpenLogin(false));\n        !location.search\n          ? navigate(md ? \"/dashboard/profile\" : \"/dashboard/profile/orders\")\n          : navigate(`${location.search.split(\"=\")[1]}`);\n        instance.defaults.headers.Authorization = `Bearer ${login?.message.tokens.access}`;\n        cookie.set(\"token\", login?.message.tokens.access, {\n          expires: 7,\n        });\n        dispatch(getProfileData());\n        dispatch(getCartList());\n      }, 1000);\n    } else if (\n      login?.message.detail === \"Пользователь не подтвержден\" &&\n      loginDialog\n    ) {\n      localStorage.setItem(\"activation\", true);\n      dispatch(setVerifyDialog(true));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [login]);\n\n  return (\n    <>\n      <SnackBar\n        txt=\"Успешный вход в систему\"\n        state={login}\n        setState={setLogin}\n      />\n      <Dialog\n        sx={{\n          \"& .MuiDialog-container\": {\n            alignItems: { xs: \"end\", md: \"center\" },\n          },\n          \"& .MuiDialog-paper\": {\n            minWidth: { xs: \"100%\", md: 420 },\n            m: { xs: \"0\", md: 3 },\n            p: 3,\n            borderRadius: { xs: \"16px 16px 0 0\", md: 2 },\n            position: \"relative\",\n          },\n\n          \"& .MuiFormControl-root\": {\n            boxShadow: \"none!important\",\n            borderRadius: 8,\n\n            \"& .MuiOutlinedInput-notchedOutline\": {\n              borderColor: \"#CECECE\",\n            },\n          },\n        }}\n        open={loginDialog}\n        onClose={() => {\n          dispatch(setOpenLogin(false));\n          !location.search\n            ? navigate(\"/\")\n            : navigate(`${location.search.split(\"=\")[1]}`);\n        }}\n      >\n        <Box\n          component=\"form\"\n          width=\"100%\"\n          action=\"\"\n          onSubmit={formik.handleSubmit}\n        >\n          <Typography variant=\"h6\" mb={3} fontWeight=\"700\" textAlign=\"center\">\n            Авторизация\n          </Typography>\n          <Typography\n            fontSize=\"12px\"\n            color=\"#000\"\n            textTransform=\"uppercase\"\n            mb={1}\n            fontWeight=\"400\"\n          >\n            {t(\"phoneNumber\")}{\" \"}\n          </Typography>\n          <TextField\n            required\n            id=\"+996 (000) 00 00 00\"\n            InputProps={{ inputComponent: CustomMask }}\n            autoComplete=\"phone\"\n            fullWidth\n            name=\"phone\"\n            onChange={formik.handleChange}\n            value={formik.values.phone}\n          />\n          <Typography\n            fontSize=\"12px\"\n            color=\"#000\"\n            textTransform=\"uppercase\"\n            mt={3}\n            mb={1}\n            fontWeight=\"400\"\n          >\n            {t(\"password\")}\n          </Typography>\n          <TextField\n            required\n            autoComplete=\"current-password\"\n            name=\"password\"\n            onChange={formik.handleChange}\n            value={formik.values.password}\n            fullWidth\n            type={visible ? \"text\" : \"password\"}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment\n                  position=\"end\"\n                  onClick={() => setVisible(!visible)}\n                >\n                  {visible ? (\n                    <FontAwesomeIcon icon=\"eye\" color=\"var(--primary)\" />\n                  ) : (\n                    <FontAwesomeIcon icon=\"eye-slash\" color=\"var(--primary)\" />\n                  )}\n                </InputAdornment>\n              ),\n            }}\n          />\n          <Box\n            display=\"flex\"\n            mt={5}\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <div className=\"text-btn\">\n              <Typography\n                variant=\"subtitle2\"\n                onClick={() => {\n                  dispatch(setForgotPasswordDialog(true));\n                }}\n                color=\"primary\"\n                component=\"h6\"\n                fontWeight=\"400\"\n              >\n                {t(\"forgotPassword\")}\n              </Typography>\n            </div>\n            <div\n              className=\"d-flex\"\n              style={{ userSelect: \"none\", cursor: \"pointer\" }}\n              onClick={() => setRememberMe(!rememberMe)}\n            >\n              <Typography\n                variant=\"subtitle2\"\n                component=\"p\"\n                mr={1}\n                fontWeight=\"400\"\n              >\n                {t(\"savee\")}\n              </Typography>\n              <IconButton>\n                {rememberMe ? <CheckMarkIconFill /> : <CheckMarkIcon />}\n              </IconButton>\n            </div>\n          </Box>\n          <Box display=\"flex\" mb={2} mt={3} flexWrap=\"nowrap\">\n            <Button\n              type=\"submit\"\n              size=\"medium\"\n              color=\"primary\"\n              fullWidth\n              variant=\"contained\"\n            >\n              {t(\"enter\")}\n            </Button>\n          </Box>\n          <Button\n            size=\"medium\"\n            onClick={() => {\n              dispatch(setRegDialog(true));\n              dispatch(setOpenLogin(false));\n            }}\n            color=\"inherit\"\n            variant=\"contained\"\n            fullWidth\n          >\n            {t(\"reg\")}\n          </Button>\n        </Box>\n      </Dialog>\n    </>\n  );\n};\n\nexport default Login;\n"],"names":["setLoading","t","dispatch","useDispatch","navigate","useNavigate","location","useLocation","theme","useTheme","md","useMediaQuery","breakpoints","down","useState","visible","setVisible","rememberMe","setRememberMe","useSelector","auth","login","loginDialog","formik","useFormik","initialValues","phone","password","onSubmit","values","replace","cookie","postLogin","firstUpdate","useRef","useEffect","setOpenLogin","useLayoutEffect","current","severity","setTimeout","search","split","instance","message","tokens","access","expires","getProfileData","getCartList","detail","localStorage","setItem","setVerifyDialog","txt","state","setState","setLogin","sx","alignItems","xs","minWidth","m","p","borderRadius","position","boxShadow","borderColor","open","onClose","component","width","action","handleSubmit","variant","mb","fontWeight","textAlign","fontSize","color","textTransform","required","id","InputProps","inputComponent","CustomMask","autoComplete","fullWidth","name","onChange","handleChange","value","mt","type","endAdornment","onClick","icon","display","justifyContent","className","setForgotPasswordDialog","style","userSelect","cursor","mr","flexWrap","size","setRegDialog"],"sourceRoot":""}