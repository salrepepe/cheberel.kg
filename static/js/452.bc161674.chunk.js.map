{"version":3,"file":"static/js/452.bc161674.chunk.js","mappings":"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","sources":["pages/Dashboard/Profile/ChangePassword/index.jsx"],"sourcesContent":["import React, { useLayoutEffect, useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  Button,\n  IconButton,\n  InputAdornment,\n  SwipeableDrawer,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport { CloseIcon } from \"../../../../assets/images/icons\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  changePassword,\n  setChangedPasswordData,\n} from \"../../../../redux/reducers/profile\";\nimport SnackBar from \"../../../../components/SnackBar\";\nimport { useRef } from \"react\";\n\nconst ChangePassword = ({ open, setOpen, t, setLoading }) => {\n  const dispatch = useDispatch();\n\n  const { changed_password_data } = useSelector(({ profile }) => profile);\n\n  const [visible, setVisible] = useState(false);\n\n  const validationPassword = Yup.object().shape({\n    passwordConfirmation: Yup.string().oneOf(\n      [Yup.ref(\"new_password\"), null],\n      \"Пароли должны совпадать\"\n    ),\n  });\n\n  const formik = useFormik({\n    validationSchema: validationPassword,\n    initialValues: {\n      passwordConfirmation: \"\",\n      old_password: \"\",\n      new_password: \"\",\n    },\n    onSubmit: (values) => {\n      setLoading(true);\n      dispatch(changePassword(values));\n    },\n  });\n\n  const firstUpdate = useRef(true);\n\n  useLayoutEffect(() => {\n    if (firstUpdate.current) {\n      firstUpdate.current = false;\n      return;\n    }\n\n    // hide linear progress\n    setLoading(false);\n\n    if (changed_password_data.severity === 200) {\n      setOpen(false);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [changed_password_data]);\n\n  return (\n    <>\n      <SnackBar\n        txt=\"Ваш пароль был успешно изменен\"\n        state={changed_password_data}\n        setState={setChangedPasswordData}\n      />\n      <SwipeableDrawer\n        anchor=\"right\"\n        sx={{\n          \"& .MuiPaper-root\": {\n            width: { xs: \"100%\", lg: \"30%\" },\n            p: 2,\n          },\n        }}\n        open={open}\n        onClose={() => setOpen(false)}\n        onOpen={() => setOpen(true)}\n      >\n        <Box display=\"flex\" mb={3} justifyContent=\"space-between\">\n          <Typography variant=\"h6\" fontWeight=\"700\">\n            {t(\"changePassword\")}\n          </Typography>\n          <IconButton onClick={() => setOpen(false)}>\n            <CloseIcon />\n          </IconButton>\n        </Box>\n        <Box\n          component=\"form\"\n          onSubmit={formik.handleSubmit}\n          display=\"flex\"\n          flexDirection=\"column\"\n          alignItems=\"space-between\"\n          justifyContent=\"space-between\"\n          height=\"100%\"\n        >\n          <Box\n            sx={{\n              \"& .MuiFormControl-root\": {\n                boxShadow: \"none!important\",\n                borderRadius: 8,\n\n                \"& .MuiOutlinedInput-notchedOutline\": {\n                  borderColor: \"#CECECE\",\n                },\n              },\n            }}\n          >\n            <Typography\n              fontSize=\"12px\"\n              mt={3}\n              mb={1}\n              textTransform=\"uppercase\"\n              color=\"#000\"\n            >\n              {t(\"password\")}\n            </Typography>\n            <TextField\n              name=\"old_password\"\n              onChange={formik.handleChange}\n              value={formik.values.old_password}\n              type={visible ? \"text\" : \"password\"}\n              fullWidth\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment\n                    position=\"end\"\n                    onClick={() => setVisible(!visible)}\n                  >\n                    {visible ? (\n                      <FontAwesomeIcon icon=\"eye\" color=\"var(--primary)\" />\n                    ) : (\n                      <FontAwesomeIcon\n                        icon=\"eye-slash\"\n                        color=\"var(--primary)\"\n                      />\n                    )}\n                  </InputAdornment>\n                ),\n              }}\n            />\n            <Typography\n              fontSize=\"12px\"\n              mt={3}\n              mb={1}\n              textTransform=\"uppercase\"\n              color=\"#000\"\n            >\n              {t(\"enterNewPassword\")}\n            </Typography>\n            <TextField\n              helperText=\"Минимум 8 символов\"\n              name=\"new_password\"\n              onChange={formik.handleChange}\n              value={formik.values.new_password}\n              type={visible ? \"text\" : \"password\"}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment\n                    position=\"end\"\n                    onClick={() => setVisible(!visible)}\n                  >\n                    {visible ? (\n                      <FontAwesomeIcon icon=\"eye\" color=\"var(--primary)\" />\n                    ) : (\n                      <FontAwesomeIcon\n                        icon=\"eye-slash\"\n                        color=\"var(--primary)\"\n                      />\n                    )}\n                  </InputAdornment>\n                ),\n                inputProps: {\n                  pattern: \".{8,}\",\n                },\n              }}\n              fullWidth\n            />\n            <Typography\n              fontSize=\"12px\"\n              mt={3}\n              mb={1}\n              textTransform=\"uppercase\"\n              color=\"#000\"\n            >\n              {t(\"repeatNewPassword\")}{\" \"}\n            </Typography>\n            <TextField\n              name=\"passwordConfirmation\"\n              onChange={formik.handleChange}\n              value={formik.values.passwordConfirmation}\n              type={visible ? \"text\" : \"password\"}\n              fullWidth\n              error={formik.errors.passwordConfirmation}\n              helperText={formik.errors.passwordConfirmation}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment\n                    position=\"end\"\n                    onClick={() => setVisible(!visible)}\n                  >\n                    {visible ? (\n                      <FontAwesomeIcon icon=\"eye\" color=\"var(--primary)\" />\n                    ) : (\n                      <FontAwesomeIcon\n                        icon=\"eye-slash\"\n                        color=\"var(--primary)\"\n                      />\n                    )}\n                  </InputAdornment>\n                ),\n              }}\n            />\n          </Box>\n          <Button\n            size=\"medium\"\n            type=\"submit\"\n            color=\"primary\"\n            fullWidth\n            variant=\"contained\"\n          >\n            {t(\"save\")}\n          </Button>\n        </Box>\n      </SwipeableDrawer>\n    </>\n  );\n};\n\nexport default ChangePassword;\n"],"names":["open","setOpen","t","setLoading","dispatch","useDispatch","changed_password_data","useSelector","profile","useState","visible","setVisible","validationPassword","Yup","shape","passwordConfirmation","oneOf","formik","useFormik","validationSchema","initialValues","old_password","new_password","onSubmit","values","changePassword","firstUpdate","useRef","useLayoutEffect","current","severity","txt","state","setState","setChangedPasswordData","anchor","sx","width","xs","lg","p","onClose","onOpen","display","mb","justifyContent","variant","fontWeight","onClick","component","handleSubmit","flexDirection","alignItems","height","boxShadow","borderRadius","borderColor","fontSize","mt","textTransform","color","name","onChange","handleChange","value","type","fullWidth","InputProps","endAdornment","position","icon","helperText","inputProps","pattern","error","errors","size"],"sourceRoot":""}